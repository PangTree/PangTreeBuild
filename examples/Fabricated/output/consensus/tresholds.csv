Splitting 0; MAX; {'seq0': 0.9375, 'seq1': 0.8125, 'seq2': 0.8823529411764706, 'seq3': 0.625, 'seq4': 0.11764705882352941, 'seq5': 0.17647058823529413}; 0.625; Value after max distance in cutoff search range.
Splitting 0; NODE; {'seq0': 0.9375, 'seq1': 0.875, 'seq2': 0.8235294117647058, 'seq3': 0.5625, 'seq4': 0.11764705882352941, 'seq5': 0.11764705882352941}; 0.5625; No so far cutoffs. Use max 2.
Splitting 0; MAX; {'seq5': 0.8823529411764706, 'seq4': 0.9411764705882353}; 0.9411764705882353; Value after max distance in cutoff search range.
Splitting 0; NODE; {'seq5': 0.8235294117647058, 'seq4': 1.0}; 0.8235294117647058; guard < min(compatibilities). Return min(compatibilities).
Splitting 2; MAX; {'seq5': 0.8823529411764706, 'seq4': 0.9411764705882353}; 0.9411764705882353; Value after max distance in cutoff search range.
Splitting 2; NODE; {'seq5': 0.8235294117647058, 'seq4': 1.0}; 1.0; No so far cutoffs. Use max 2.
Splitting 2; MAX; {'seq5': 1.0}; 1.0; Value after max distance in cutoff search range.
Splitting 2; NODE; {'seq5': 1.0}; 1.0; guard < min(compatibilities). Return min(compatibilities).
Splitting 1; MAX; {'seq0': 0.9375, 'seq1': 0.875, 'seq2': 0.8235294117647058, 'seq3': 0.5625}; 0.8235294117647058; Value after max distance in cutoff search range.
Splitting 1; NODE; {'seq0': 1.0, 'seq1': 0.8125, 'seq2': 0.8235294117647058, 'seq3': 0.5625}; 0.8125; No so far cutoffs. Use max 2.
Splitting 1; MAX; {'seq3': 1.0}; 1.0; Value after max distance in cutoff search range.
Splitting 1; NODE; {'seq3': 1.0}; 1.0; guard < min(compatibilities). Return min(compatibilities).
Splitting 5; MAX; {'seq0': 1.0, 'seq1': 0.8125, 'seq2': 0.8235294117647058}; 1.0; Value after max distance in cutoff search range.
Splitting 5; NODE; {'seq0': 1.0, 'seq1': 0.8125, 'seq2': 0.8235294117647058}; 1.0; No so far cutoffs. Use max 2.
Splitting 5; MAX; {'seq1': 1.0, 'seq2': 0.7647058823529411}; 1.0; Value after max distance in cutoff search range.
Splitting 5; NODE; {'seq1': 1.0, 'seq2': 0.7647058823529411}; 1.0; guard > max(compatibilities). Use max 2.
Splitting 5; MAX; {'seq2': 1.0}; 1.0; Value after max distance in cutoff search range.
Splitting 5; NODE; {'seq2': 1.0}; 1.0; guard < min(compatibilities). Return min(compatibilities).
